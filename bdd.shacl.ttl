# SPDX-License-Identifier:  MPL-2.0
# Author: Minh Nguyen (minh@mail.minhnh.com)
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix bdd: <https://secorolab.github.io/metamodels/acceptance-criteria/bdd#> .
@prefix time: <https://secorolab.github.io/metamodels/time#> .
@prefix env: <https://secorolab.github.io/metamodels/environment#> .
@prefix agn: <https://secorolab.github.io/metamodels/agent#> .
@prefix task: <https://secorolab.github.io/metamodels/task#> .

#######################################
# Basic shape for Scenario
#######################################
# A bdd:Scenario has exactly 1 bdd:Given, bdd:When, and bdd:Then
bdd:ScenarioShape
  a sh:NodeShape ;
  sh:targetClass bdd:Scenario ;
  sh:property [
    sh:path bdd:given ;
    sh:class bdd:Given ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:when ;
    sh:class bdd:When ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:then ;
    sh:class bdd:Then ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

# bdd:of-scenario must refer to a bdd:Scenario
bdd:OfScenarioShape
  a sh:PropertyShape ;
  sh:description ":of-scenario must link to :Scenario" ;
  sh:path bdd:of-scenario ;
  sh:class bdd:Scenario ;
  sh:minCount 1 ;
  sh:maxCount 1 .

# bdd:Given, bdd:When, and bdd:Then must be associtated with exactly 1 bdd:Scenario
bdd:GivenShape
  a sh:NodeShape ;
  sh:targetClass bdd:Given ;
  sh:property [
    sh:path [ sh:inversePath bdd:given ] ;
    sh:class bdd:Scenario ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:WhenShape
  a sh:NodeShape ;
  sh:targetClass bdd:When ;
  sh:property [
    sh:path [ sh:inversePath bdd:when ] ;
    sh:class bdd:Scenario ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:ThenShape
  a sh:NodeShape ;
  sh:targetClass bdd:Then ;
  sh:property [
    sh:path [ sh:inversePath bdd:then ] ;
    sh:class bdd:Scenario ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

#######################################
# FluentClause shape
#######################################
bdd:FluentClauseShape
  a sh:NodeShape ;
  sh:targetClass bdd:FluentClause ;
  sh:property [
    sh:path bdd:clause-of ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:or (
      [ sh:class bdd:Given ; ]
      [ sh:class bdd:When; ]
      [ sh:class bdd:Then; ]
    )
  ] ;
  sh:property [
    sh:path bdd:holds ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:class bdd:Fluent ;
  ] ;
  sh:property [
    sh:path bdd:holds-at ;
    sh:class time:TimeConstraint ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

#######################################
# ScenarioTemplate shape
#######################################
bdd:ScenarioTemplateShape
  a sh:NodeShape ;
  sh:targetClass bdd:ScenarioTemplate ;
  sh:property bdd:OfScenarioShape ;
  sh:property [
    sh:path bdd:has-scene ;
    sh:class bdd:Scene ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:has-clause;
    sh:class bdd:FluentClause ;
    sh:minCount 1 ;
  ] .

#######################################
# Scene shape
#######################################
bdd:OfSceneShape
  a sh:PropertyShape ;
  sh:description ":of-scene must link to :Scene" ;
  sh:path bdd:of-scene ;
  sh:class bdd:Scene ;
  sh:minCount 1 ;
  sh:maxCount 1 .

bdd:SceneHasObjectsShape
  a sh:NodeShape ;
  sh:targetClass bdd:SceneHasObjects ;
  sh:property bdd:OfSceneShape ;
  sh:property [
    sh:path env:has-object ;
    sh:class env:Object;
    sh:minCount 1 ;
  ] .

bdd:SceneHasWorkspacesShape
  a sh:NodeShape ;
  sh:targetClass bdd:SceneHasWorkspaces ;
  sh:property bdd:OfSceneShape ;
  sh:property [
    sh:path env:has-workspace ;
    sh:class env:Workspace ;
    sh:minCount 1 ;
  ] .

bdd:SceneHasAgentsShape
  a sh:NodeShape ;
  sh:targetClass bdd:SceneHasAgents ;
  sh:property bdd:OfSceneShape ;
  sh:property [
    sh:path agn:has-agent;
    sh:class agn:Agent ;
    sh:minCount 1 ;
  ] .

#######################################
# ScenarioVariant and UserStory shape
#######################################
bdd:TaskVariationShape
  a sh:NodeShape ;
  sh:targetClass bdd:TaskVariation ;
  sh:property [
    sh:path task:of-task ;
    sh:class task:Task ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:CombinationShape
  a sh:NodeShape ;
  sh:targetClass bdd:Combination ;
  sh:property [
    sh:path bdd:repetition-allowed ;
    sh:datatype xsd:boolean ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:select ;
    sh:datatype xsd:positiveInteger ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:from ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:TableVariationShape
  a sh:NodeShape ;
  sh:targetClass bdd:TableVariation ;
  sh:property [
    sh:path bdd:variable-list ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:rows ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:CartesianProductVariationShape
  a sh:NodeShape ;
  sh:targetClass bdd:CartesianProductVariation ;
  sh:property [
    sh:path bdd:variable-list ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:of-sets ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:ScenarioVariantShape
  a sh:NodeShape ;
  sh:targetClass bdd:ScenarioVariant ;
  sh:property [
    sh:path bdd:of-template ;
    sh:class bdd:ScenarioTemplate ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path bdd:has-scene ;
    sh:or (
      [ sh:class bdd:SceneHasObjects ; ]
      [ sh:class bdd:SceneHasWorkspaces ; ]
      [ sh:class bdd:SceneHasAgents ; ]
    )
  ] ;
  sh:property [
    sh:path bdd:has-variation ;
    sh:class bdd:TaskVariation ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

bdd:UserStoryShape
  a sh:NodeShape ;
  sh:targetClass bdd:UserStory ;
  sh:property [
    sh:path bdd:has-criteria ;
    sh:class bdd:ScenarioVariant ;
    sh:minCount 1 ;
  ] .
